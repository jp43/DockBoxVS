#!/usr/bin/env python
import os
import sys
import argparse
import subprocess
import ConfigParser
import shutil

from time import time
from glob import glob
import pandas as pd

from dockbox_vs import queuing
from dockbox_vs import utils

#TODO: add the possibilty to prepare scripts for torque and ll
parser = argparse.ArgumentParser(description="Check Virtual Screening Level 1!")

parser.add_argument('-f',
    type=str,
    dest='config_file',
    metavar='FILE',
    default='config.ini',
    help='config file: .ini')

parser.add_argument('-nligands-per-job',
    dest='nligands_per_job',
    type=int,
    metavar='INT',
    default=1,
    help='Number of ligands to be run for every submitted job (used for VS levels 1))')

parser.add_argument('-w',
    dest='vsdir',
    type=str,
    default='vs',
    metavar='DIRECTORY NAME',
    help='name of directory created for virtual screening')

group = parser.add_mutually_exclusive_group(required=False)

for sch in queuing.known_schedulers:
    group.add_argument('-%s'%sch,
        dest='%s_options'%sch,
        type=str,
        metavar='OPTIONS',
        default=None,
        help='Options for %s'%queuing.known_schedulers[sch])

args = parser.parse_args()

use_target_folder = True

config = ConfigParser.SafeConfigParser()
config.read(args.config_file)
# get names of docking programs from config file
if config.has_option('DOCKING', 'rescoring'):
    is_rescoring_config = config.get('DOCKING', 'rescoring').lower()
    if is_rescoring_config in ['yes', 'true']:
        programs = config.get('RESCORING', 'program').lower()
        is_rescoring = True
    else:
        programs = config.get('DOCKING', 'program').lower() 
        is_rescoring = False
else:
    is_rescoring = False
    programs = config.get('DOCKING', 'program').lower() 

programs = map(str.strip, programs.split(','))
last_program = programs[-1]

def is_layer(directory):
    base = os.path.basename(directory)
    if base[:3] == 'lig' and len(base.split('-')) == 2: 
        return True
    else:
        return False

nlayers = 0
checked_dir = sorted(glob(args.vsdir+'/*'))[-1]
while is_layer(checked_dir):
    nlayers += 1
    checked_dir = sorted(glob(checked_dir+'/*'))[-1]

if nlayers == 0:
    sys.exit("VS was not performed with level 1!")
else:
    ligid = checked_dir.split('/')[-1][3:]
    # get number of ligands
    nligands = int(ligid)
    ndigits = len(ligid)
    if use_target_folder:
        # get last target ID
        recdir = sorted(glob(checked_dir+'/target*'))[-1]
        recid_last = recdir.split('/')[-1]

jobidx = 0
ndone = 0
workdirs_script = []
for ligidx_abs in range(nligands):
    tcpu1 = time()
    ligidx_str = str(ligidx_abs+1)
    ligid = 'lig' + '0'*(ndigits-len(ligidx_str)) + ligidx_str
    tcpu2 = time()

    subdir = args.vsdir
    for layer_idx in range(nlayers, 1, -1):
        subdir += utils.get_subdir_from_ligid(ligid, layer_idx=layer_idx, nligands=nligands)
    subdir += '/lig*'

    if use_target_folder:
        subdir += '/' + ligid + '/' + recid_last
    else:
        subdir += '/' + ligid

    if is_rescoring:
        file_to_be_checked = subdir + '/rescoring/%s.score'%last_program
    else:
        file_to_be_checked = subdir + '/%s/score.out'%last_program

    tcpu3 = time()
    print subprocess.check_output('cat %s'%file_to_be_checked, shell=True)
    tcpu4 = time()

    #if os.path.isfile(file_to_be_checked):
    #    is_done = True
    #    ndone += 1
    #else:
    #    is_done = False
    #tcpu4 = time()
    print tcpu2-tcpu1, tcpu3-tcpu2, tcpu4-tcpu3

    sys.exit()
    if ligidx_abs == 10:
        sys.exit()

print "Percentage of ligands finished: %4.1f%%"%(ndone*100./nligands)
