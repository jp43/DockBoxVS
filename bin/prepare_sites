#!/usr/bin/env python
import os
import sys
import shutil
import subprocess
import argparse
import pandas as pd

from mdkit.utility import reader
from mdkit.utility import utils
from dockbox import moe

parser = argparse.ArgumentParser(description="Prepare sites for Virtual Screening (3rd stage)")

parser.add_argument('-r',
    type=str,
    dest='input_files_r',
    nargs='+',
    metavar='FILE',
    default=['targets.csv'],
    help = 'target file(s): .pdb, .csv (default: targets.csv)')

parser.add_argument('-blankcsv',
    action='store_true',
    default=False,
    help='create an empty output .csv file to be completed with binding sites location and size')

parser.add_argument('-csv',
    type=str,
    dest='csvfile',
    default='sites.csv',
    metavar='FILE',
    help='output .csv filename (default: sites.csv)')

parser.add_argument('-minplb',
    dest='minplb',
    type=float,
    default=1.0,
    metavar='VALUE',
    help="minimimum PLB value to consider (default: 1.0). To be used with sitefinder option.")

parser.add_argument('-minsize',
    type=float,
    dest='minsize',
    default=30.0,
    metavar='VALUE',
    help = 'minimum size for the box (default: 30.0 (A)). To be used with sitefinder option.')

parser.add_argument('-nsitesmax',
    dest='nsitesmax',
    type=int,
    default=1,
    metavar='VALUE',
    help="maximum number of sites kept (default: 1). To be used with sitefinder option.")

parser.add_argument('-l',
    type=str,
    dest='input_files_l',
    nargs='+',
    metavar='FILE',
    help='.pdb or .mol2 files containing a binding molecule, used to predict the binding site')

parser.add_argument('-sitefinder',
    action='store_true',
    default=False,
    help="use MOE's Site Finder to find most probable binding sites")

args = parser.parse_args()

exts = list(set([os.path.splitext(ff)[1] for ff in args.input_files_r]))

if len(exts) != 1: # if more than one extension provided
    raise ValueError("All files specified with -r option must have the same extension!")

input_files_r = []
if exts[0] == '.pdb': # if input files are pdbfiles
    for file_r in args.input_files_r:
        if os.path.exists(file_r):
            input_files_r.append(os.path.abspath(file_r))
        else:
            raise ValueError("File %s not found!"%(file_r))
    ntargets = len(input_files_r)
    nid_digits = max(3, len(str(ntargets)))
    targetids = []
    for jdx, file_r in enumerate(input_files_r):
        targetids.append('target'+(nid_digits-len(str(jdx+1)))*'0' + str(jdx+1))
elif exts[0] == '.csv': # if input files is the csvfile
    if len(args.input_files_r) != 1:
        raise ValueError("More than 1 csvfile specified with -r option.")
    df_targets = pd.read_csv(args.input_files_r[0])
    input_files_r = [os.path.abspath(ff) for ff in list(df_targets['pdbfile'])]
    ntargets = len(input_files_r)
    targetids = list(df_targets['targetID'])
else:
    raise IOError("Extension of files used with -r option not recognized!")

curdir = os.getcwd()
info = {}
features = ['target', 'center', 'size', 'site']
if args.sitefinder:
    features += ['plb']
for ft in features:
    info[ft] = []

if args.blankcsv:
    # create a blan .csv file with targets ids
    blank_info = {'target': targetids, 'center': ['x, y, z']*ntargets, 'size': ['x, y, z']*ntargets, 'site': [1]*ntargets}
    df = pd.DataFrame(blank_info)
    df[features].to_csv(args.csvfile, index=False)
    sys.exit(0)

if args.input_files_l:
    if args.sitefinder:
        raise ValueError('Site Finder option selected and list of ligand files provided!')
    for file_l in args.input_files_l:
        if not os.path.exists(file_l):
            raise ValueError("File %s not found!"%(file_l))
    nfiles_r = len(input_files_r)
    if len(args.input_files_l) != nfiles_r:
        raise ValueError('Number of ligand files (%s) should match number of target files (%s)'%(len(args.input_files_l), nfiles_r))
elif args.sitefinder:
        sitedir = 'sitefinder'
        shutil.rmtree(sitedir, ignore_errors=True)
        os.mkdir(sitedir)
else:
   raise ValueError('Sitefinder option not selected and list of ligand files empty!')

pwd = os.getcwd()
for jdx, file_r in enumerate(input_files_r):
    targetid = targetids[jdx]

    if args.sitefinder:
         sitedir_r = sitedir + '/' + targetid
         os.mkdir(sitedir_r)
         os.chdir(sitedir_r)

         # use moe sitefinder
         moe.write_sitefinder_script('run_site_finder.sh', file_r, args)
         subprocess.check_output('bash run_site_finder.sh', shell=True)
         with open('moebatch.log', 'r') as ff:
            ff.next()
            nsites = 0
            for idx, line in enumerate(ff):
                line_s = line.split()
                plb = float(line_s[1])

                if (plb > args.minplb and idx+1 <= args.nsitesmax) or idx==0:
                    info['target'].append(targetid)
                    line_s = line.split()
                    info['plb'].append(plb)

                    # get box center
                    center = ', '.join(['%.2f'%float(x) for x in line_s[2:5]])
                    info['center'].append(center)

                    # get boxsize
                    radius = float(line_s[5])
                    boxsize = max(2*radius,args.minsize)
                    info['size'].append(', '.join(['%.2f'%boxsize for jdx in range(3)]))
                    info['site'].append('%s'%(idx+1))
         os.chdir(pwd)    
    else:
        file_l = args.input_files_l[jdx]
        rpdb = reader.open(file_l)
        coords = []

        base, ext = os.path.splitext(file_l)
        for line in rpdb.next()['ATOM']:
            if ext == '.pdb':
                coords.append(map(float,[line[4], line[5], line[6]]))
            elif ext == '.mol2':
                coords.append(map(float,[line[2], line[3], line[4]]))
            else:
                raise ValueError('Format not recognized!')

        cog = utils.center_of_geometry(coords)
        center = ', '.join(['%.2f'%float(x) for x in cog])
        info['target'].append(targetid)
        info['center'].append(center)
        info['size'].append(', '.join(['%.2f'%args.minsize for kdx in range(3)]))
        info['site'].append('1')

info = pd.DataFrame(info)
info[features].to_csv(args.csvfile, index=False)
