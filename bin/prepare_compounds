#!/usr/bin/env python
import os
import sys
import shutil
import stat
import subprocess

from glob import glob

import argparse
import ConfigParser
import pandas as pd

known_formats = ['.sdf', '.smi', '.mol2']
parser = argparse.ArgumentParser(description="Prepare compound files for Virtual Screening (1st stage)")

parser.add_argument('-l',
    type=str,
    dest='input_files_l',
    nargs='+',
    metavar='FILE',
    help = 'ligand file(s) with possibly many structures. Supported formats: '+', '.join(known_formats))

parser.add_argument('-csv',
    type=str,
    dest='csvfile',
    default='compounds.csv',
    help='output .csv filename (default: compounds.csv)')

args = parser.parse_args()

def get_compounds_number(file_l):
    suffix, ext = os.path.splitext(file_l)
    if ext == '.sdf':
        # count number of lines with "M  END"
        nligs = subprocess.check_output('fgrep -c "M  END" %s'%file_l, shell=True)
    elif ext == '.smi':
        # count number of non-blank non-commented lines
        nligs = subprocess.check_output("awk '!/^#/ && !/^$/{c++}END{print c}' %s"%file_l, shell=True)
    elif ext == '.mol2':
        # count number of lines with @<TRIPOS>ATOM
        nligs = subprocess.check_output('fgrep -c "@<TRIPOS>ATOM" %s'%file_l, shell=True)
    nligs = int(nligs)
    return nligs

curdir = os.getcwd()
nligands_per_file = []

input_files_l = []
input_files_l_exts = []

for file_l in args.input_files_l:

    if os.path.exists(file_l):
        input_files_l.append(os.path.abspath(file_l))
        nligands_per_file.append(get_compounds_number(file_l))
        input_files_l_exts.append(os.path.splitext(file_l)[1])

    else:
        raise ValueError("File %s not found!"%(file_l))

nfiles = len(nligands_per_file)
nligands = sum(nligands_per_file)
print "%i compounds detected..."%nligands

nid_digits = max(3, len(str(nligands)))
shift = 0 # when not updating, the shift is zero

info = {}
features = ['ligID', 'file_origin', 'index', 'name', 'isomer']
for ft in features:
    info[ft] = []

for ldx, file_l in enumerate(input_files_l):
    ext = input_files_l_exts[ldx]
    with open(file_l) as ff:
        for jdx in range(nligands_per_file[ldx]):
            # ID of ligand (depends on the shift used)
            kdx = jdx + shift + 1
            ligid = 'lig' + (nid_digits-len(str(kdx)))*'0' + str(kdx)

            info['ligID'].append(ligid)
            info['file_origin'].append(os.path.relpath(file_l))
            info['index'].append(jdx+1)
            name = None
            if ext == '.smi':
                name = ff.next().split()[-1]
            elif ext == '.sdf':
                raise NotImplemented
            elif ext == '.mol2':
                for line in ff:
                    if line.startswith('@<TRIPOS>MOLECULE'):
                        name = '_'.join(ff.next().split())
                        break
            info['name'].append(name)
            info['isomer'].append(1)
    shift = kdx

df = pd.DataFrame(info)
df[features].to_csv(args.csvfile, index=False)
